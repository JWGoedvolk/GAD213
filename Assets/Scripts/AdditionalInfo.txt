LINGO:
NYI => Not Yet Implemented
NYD => Not Yet Decided

Minimum Requirements:
[x] File Management
	[x] Checks to see if a folder exists before accessing it.
	[x] Checks to see if a file exists before accessing it.
	[x] Allows flexibility of location i.e. not hard coded file paths.
	[x] Clear version naming conventions.
	[x] Checks to see if new versions of at least one file exist and has appropriate logic to process an update of said file.
[] Procedural Content
	[ ] Utilising Asset Bundles stored on a cloud provider that when downloaded allow new content to be added to the 
		base game such as: new collectables, enemies, obstacles etc. 
	[x] Accessing and utilising texture data to place objects within an environment at least once.
[] Optimisation Techniques
	[] Optimise at least one system within your project and discuss this within your testing report with discussing the techniques used and the results.
	[] Demonstrate the usage and understanding of the Unity Profiler.
[] Data Serialisation and Persistence.
	[] Saving at least three elements of game data within your project.
	[] Capturing Game Analytics for at least 3 pieces of data.
		TimesSkipped => long | string
		Score => int
		Level => int = The number of times leveled up
	[] Allowing for Game Unlockables for at least one in game element for player progress i.e. levels or items etc.
		Achievements:
			Skip 5 level ups => Strong Enough As Is
			Reach endless mode => Beat The Game
			Take same level up 10 times => Or So Help Me!
		Unlockables:
			Invul Time Up => Reach Endless Mode
			Hardcore Mode => Reach Endless Mode => Gives a 5x score multiplier, but sets HP to 1 allways 
	[x] Loading and parsing save data for at least three elements of game data within your project i.e player position, items etc.
	[x] Storing and accessing your save data from a cloud service provider.
	[ ] Utilising Text Files, JSON, XML or Binary Serialisation for offline backup of data.

=== TODO PRIORITY ===
// [_] Main Menu
	   |> Start Game
	      |> Choose Ship Hull
	   |> Weapon Gallery
	      |> Weapons and how to unlock them
		  |> BUllets and how to unlock them
	   |> Settings
	   |> Quit
// [x] Unlockables
// [_] Achievements
// [_] Pop up windows

=== TODO STRETCH ===
// [_] Finish user authentication
// [_] Allow for cloud saving of score and highscore
// [_] Add in online highscore leaderboard

Content:
	Weapons:
	- Basic => Unlocked from start
	- Railgun => Unlocked from start
	- Minigun => Unlocked from start
	- Bolter => Get to Wave 5
	Bullets:
	- Basic => Unlocked from start
	- Energy => Unlocked from start
	- Sabot => Unlocked from start
	- Torpedo => Get bullet size to 5
	Ship Hulls:
	- Basic => Unlocked from start
	- Hull Breaker => Take 50 Damage in 1 game
	  |> Deals contact damage and takes less contact damage. Deals drastically less weapon damage
	- Dreadnaught => Get player mass to 5
	  |> Has significantly more health but drastically less speed
	Game Modes:
	- Waves => Progress through the waves then exits once final wave completed. Score multiplier of 1x
	- Endless => Go until you die sapwning final wave if reached. Score multiplier of 1.5x
	- Hardcore => Endless with faster enemies that hit harder. Score multiplier of 4x |> Reach 5 minutes Endlesss
	Achievements:
	- Beat The Game => Reach the final wave and go Endless
	- No End In Sight => Reach 5 minutes in Endless
	- You Are Epxendable => Die within 1 minute in any mode
	- Big Cungus => Get bullet scale to 5
	- Oh Lawd He Comin' => Get player mass to 5

Log sysntax:
[INFO] => this is to say what is being done currently
[DEBUG] => This is data printed for debuging purposes. These should be minimised to removed as much as possible
[STARTUP] => This is part of the start up sequence. See Start Up Sequence for more information
[FILE] => This is to do with the file system, whether it be creating, reading, writing, downloading, uploading
[SYNC] => This is for denoting that the file information in question are to do with its syncing process
[DB] => This indicates the report has something to do with Firestore
[USER] => This is for things to do with the users and their profiles on Firestore or locally stored
[UPLOAD/DOWNLOAD] => Show the direction of data travel to Cloud services. UPLOAD = data being sent to Cloud service, DOWNLOAD = data coming in from Cloud service
[ERROR] => Something went wrong and an error needs to be displayed to the player. See the attached message for the error.
|STATUS| => Whether the process is starting, finishing, waiting.

Start up sequence:
|> Check internet connection
>= Internet connection
||>	  Sync files with Google Drive
||>	  Async load unlockables
||>	  Async load wave from text file
||>	  Async load points from texture
|||>  Get unlocked weapons, bullets
||>	  Hide load screen and spawn first wave
>= No connection
||>   Async load unlockables from local file
||>   Async load wave from text file from local file
||>   Async load points from local file
||>   Hide load screen and spawn first wave

MetaData file:
{
	long ticks => UTC time in ticks since the file was created
	string rawLink => raw share link to the asociated actual file
}

Local Save Data: Will be unique per player. Stored in Firestore, updated on death
	Password | string => used for verifying if a document with the user's email exists
	UnlockedItems | JSON dictionary string |> UnlockablesManager.unlockedItems
	Achievements | JSON dictionary string |> AchievementsManager.achievementProgress
	Highscore | int => Starts at 0 and gets updated if current run's score is higher

How to update file on the cloud:
1. turn the local file into byte[] | AssetLoader
2. update actual file on cloud | AssetLoader
3. turn the local meta data into byte[] | AssetLoader
4. update meta data file on cloud | AssetLoader

How to update local file from cloud:
1. delete local file | AssetLoader
3. download byte[] of cloud file | AssetLoader
2. write downloaded byte[] into local file | AssetLoader
3. download byte[] of cloud meta data | AssetLoader
4. write downloaded byte[] into local meta data file | AssetLoader

How to authenticate user:
1. Try to get all the stored users on Firestore
1. Enter Email | UserAuthenticator
2. Try to get the document from Firestore with the provided email.
2.1 Success => save the player's data to the document | Firestore
	Get the user password | UserAuthenticator
	Compare it against the returned document | UserAuthenticator
	if its the same, save the data. If it is different, throw error and ask to try again
2.2 Failure => Throw error. Ask to register | UserAuthenticator

How to register a new user:
1. Get the following: | UserAuthenticator
	Email => Document ID,
	Username => Possibly used for online leaderboard,
	Password => Will be used to verify its the correct user
	Data => Stores the JSON string with things like the score, weapon stats, etc.
2. Save the user to the Firestore database | Firestore

Upgrading sequence:
1. Upon collecting enough XP:
	set GameManager.IsPaused = true;
	raise PauseGame event
2. Randomly select to show normal or weapon upgrade screen
		Set upgrades on the shown screen
3. Upon selecting an upgrade:
	Apply the upgrade
	disable shown screen
	Set GameManager.IsPaused = false
	Raise UnpauseGame event